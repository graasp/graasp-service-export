# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: graasp-service-exporter

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  # the default is 6 seconds
  # note: api gateway current maximum is 30 seconds
  timeout: 30

  environment:
    API_PORT: ${file(./env.${self:provider.stage}.json):API_PORT}
    SNS_PORT: ${file(./env.${self:provider.stage}.json):SNS_PORT}
    GRAASP_HOST: ${file(./env.${self:provider.stage}.json):GRAASP_HOST}
    LOGGING_LEVEL: ${file(./env.${self:provider.stage}.json):LOGGING_LEVEL}
    TMP_PATH: ${file(./env.${self:provider.stage}.json):TMP_PATH}
    GRAASP_FILES_HOST: ${file(./env.${self:provider.stage}.json):GRAASP_FILES_HOST}
    S3_BUCKET: ${file(./env.${self:provider.stage}.json):S3_BUCKET}
    S3_HOST: ${file(./env.${self:provider.stage}.json):S3_HOST}
    CI_BRANCH: ${env:CI_BRANCH}
    CI_COMMIT_ID: ${env:CI_COMMIT_ID}
    ACCOUNT_ID: ${file(./env.${self:provider.stage}.json):ACCOUNT_ID}
    REGION: ${file(./env.${self:provider.stage}.json):REGION}
    CHROME_PATH: ${file(./env.${self:provider.stage}.json):CHROME_PATH}

  # you can overwrite defaults here
  #  stage: dev
  #  region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: 'Allow'
      Resource: '*'
      Action:
        - 'sns:*'
    - Effect: 'Allow'
      Action:
        - 's3:PutObject'
        - 's3:ListBucket'
        - 's3:GetObject'
      Resource:
        Fn::Join:
          - ''
          - - arn:aws:s3:::${self:provider.environment.S3_BUCKET}
            - '/*'
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
package:
  include:
    - dist/**
  exclude:
    - node_modules/puppeteer/.local-chromium/**
    - node_modules/aws-sdk/**

functions:
  getStatus:
    handler: dist/index.getStatus
    events:
      - http:
          path: /
          method: GET
          cors: true
  getVersion:
    handler: dist/index.getVersion
    events:
      - http:
          path: /version
          method: GET
          cors: true
  getExport:
    handler: dist/index.getExport
    events:
      - http:
          path: /{id}
          method: GET
          cors: true
          request:
            parameters:
              paths:
                id: true
  postExport:
    handler: dist/index.postExport
    events:
      - http:
          path: /{id}
          method: POST
          cors: true
          request:
            parameters:
              paths:
                id: true
  generateExport:
    handler: dist/index.generateExport
    memorySize: 1536
    # todo: five minute timeout for export generation
    timeout: 30
    layers:
      - arn:aws:lambda:${self:provider.environment.REGION}:${self:provider.environment.ACCOUNT_ID}:layer:graasp-service-chrome:2
    events:
      - sns: export
    onError: arn:aws:sns:${self:provider.environment.REGION}:${self:provider.environment.ACCOUNT_ID}:dlq
  handleError:
    handler: dist/index.handleError
    events:
      - sns: dlq

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

custom:
  serverless-offline:
    port: ${self:provider.environment.API_PORT}
  serverless-offline-sns:
    port: ${self:provider.environment.SNS_PORT}
    debug: ${self:provider.environment.DEBUG}

plugins:
  - serverless-offline-sns
  - serverless-offline
